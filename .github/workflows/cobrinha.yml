nome : lan√ßamento

em :
  workflow_dispatch :
    entradas :
      vers√£o :
        descri√ß√£o : " Vers√£o "
        padr√£o : " 0.0.1 "
        obrigat√≥rio : verdadeiro
        tipo : cadeia
      descri√ß√£o :
        descri√ß√£o : " Descri√ß√£o da vers√£o "
        tipo : cadeia

empregos :
  lan√ßamento :
    run-on : ubuntu-latest
    passos :
      - usa : actions/checkout@v2

      - usa : docker/setup-qemu-action@v1

      - usa : docker/setup-buildx-action@v1

      - usa : docker/login-action@v1
        com :
          nome de usu√°rio : ${{ secrets.DOCKERHUB_USERNAME }}
          senha : ${{ secrets.DOCKERHUB_TOKEN }}

      - name : cria e publica a imagem do docker
        usa : docker/build-push-action@v2
        id : docker-build
        com :
          empurrar : verdadeiro
          etiquetas : |
            platane/snk:${{ github.sha }}
            platane/snk:${{ github.event.inputs.version }}
      - name : atualize action.yml para apontar para a imagem do docker rec√©m-criada
        executar : |
          sed -i "s/image: .*/image: docker:\/\/platane\/snk@${{ steps.docker-build.outputs.digest }}/" action.yml
      - usa : actions/setup-node@v2
        com :
          cache : fio
          vers√£o do n√≥ : 16

      - name : construir a√ß√£o somente svg
        executar : |
          yarn install --frozen-lockfile
          constru√ß√£o de fios: a√ß√£o
          rm -r svg-only/dist
          mv packages/action/dist svg-only/dist
      - nome : vers√£o do pacote bump
        run : yarn version --no-git-tag-version --new-version ${{ github.event.inputs.version }}

      - name : push nova compila√ß√£o, vers√£o da tag e push
        id : push-tags
        executar : |
          VERSION=${{ github.event.inputs.version }}
          git config --global user.email "bot@platane.me"
          git config --global user.name "release bot"
          git add package.json svg-only/dist action.yml
          git commit -m "üì¶ $VERSION"
          git tag v$VERSION
          git push origin main --tags
          if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; ent√£o
            git tag v$( echo $VERSION | cut -d. -f 1-1 )
            git tag v$( echo $VERSION | cut -d. -f 1-2 )
            git push origin --tags --force
            echo ::set-output name=prerelease::false
          sen√£o
            echo ::set-output name=prerelease::true
          fi
      - usa : actions/create-release@v1
        ambiente :
          GITHUB_TOKEN : ${{ secrets.GITHUB_TOKEN }}
        com :
          tag_name : v${{ github.event.inputs.version }}
          corpo : ${{ github.event.inputs.description }}
          pr√© -lan√ßamento : ${{ step.push-tags.outputs.prerelease }}
